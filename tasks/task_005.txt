# Task ID: 5
# Title: Pseudonymization Engine
# Status: in-progress
# Dependencies: 4
# Priority: high
# Description: Develop the core privacy layer that pseudonymizes sensitive customer data immediately after upload, implementing two distinct privacy layers: (1) Security Pseudonymization for irreversible anonymization before external LLM processing, and (2) Display Masking for reversible, toggle-controlled UI masking. Ensure compliance with GDPR and Hong Kong PDPO requirements, including documentation of privacy principles, technical implementation, and security measures. The Security Pseudonymization module is now fully implemented and ready for integration with the data processing pipeline. The enhanced sensitive field identification system is now fully implemented, providing comprehensive PII coverage (13 types), Hong Kong-specific pattern support, confidence scoring, and unified integration for both privacy layers. Next step: integrate the reversible display masking system with the new field identification module.
# Details:
The privacy.py component now requires two privacy layers:

1. **SECURITY PSEUDONYMIZATION (Permanent, for LLM protection)**:
   - Irreversible anonymization of data before sending to external LLMs using SHA-256 hashing with a configurable salt (minimum 32 bytes) for customer identifiers.
   - Implemented as a dedicated module (`src/utils/security_pseudonymization.py`) with a `SecurityPseudonymizer` class.
   - Provides `anonymize_field()` for individual fields and `anonymize_dataframe()` for DataFrame-wide processing.
   - Handles comprehensive field types (Account ID, HKID, emails, etc.) with automatic sensitive field detection.
   - Ensures consistent, irreversible hashing (same input â†’ same output).
   - No original PII can be recovered from hashed values.
   - Integrated with the upload component and used before any external API calls.

2. **DISPLAY MASKING (Reversible, for UI)**:
   - Toggle-controlled masking for webpage display.
   - Users can turn masking on/off for viewing purposes.
   - Original data remains accessible locally for authorized display.
   - Masking patterns like "J*** D***" for names, "j***@*****.com" for emails.

Architecture:
- Store original data locally in encrypted form.
- Generate anonymized version for LLM processing (never send original PII externally).
- Apply display masking as a UI layer with toggle control.

This dual-layer approach ensures both security (LLM protection) and usability (display flexibility), while maintaining compliance with GDPR and Hong Kong PDPO requirements.

**Enhanced Sensitive Field Identification (Completed):**
- Core module: `src/utils/enhanced_field_identification.py` with `EnhancedFieldIdentifier` class
- Expanded coverage: 13 PII types (Account ID, HKID, Email, Phone, Name, Address, Passport, Driver's License, Credit Card, Bank Account, IP Address, Date of Birth)
- Hong Kong-specific patterns: HKID, phone, address
- Context-aware detection: column names + sample values
- Confidence scoring (0.0-1.0) for detection quality
- Configurable sensitivity thresholds
- Performance optimized (1000+ rows/ms)
- Advanced features: FieldType Enum, FieldPattern dataclass, FieldIdentificationResult, custom pattern loading (JSON), export/import configuration, hybrid detection, false positive reduction, utility functions
- 30+ comprehensive tests (field types, HK patterns, performance, confidence, config, integration)
- Demonstrated high accuracy and speed on sample data
- Unified service for both privacy layers, ready for integration
- GDPR and Hong Kong PDPO compliant, with audit trail and extensibility

**Next Steps:**
- Integrate reversible display masking system with the enhanced field identification module for unified, accurate masking across all supported PII types.
- Continue with local encrypted storage and pipeline integration as planned.

# Test Strategy:
Verify that all sensitive data is irreversibly pseudonymized (anonymized) using salted SHA-256 hashing (minimum 32-byte salt) before any external LLM processing, and that no original PII is sent externally. Confirm that display masking is reversible only for authorized users and can be toggled on/off in the UI. Test field identification logic to ensure all relevant PII is covered, including new types such as passport numbers, driver's license numbers, credit card numbers, as well as Hong Kong-specific identifiers, using the EnhancedFieldIdentifier module. Validate that original data is stored locally in encrypted form and is never transmitted to external services. Ensure configuration options for sensitivity rules and custom field types are functional, including export/import of pattern configurations. Ensure compliance with GDPR and Hong Kong PDPO documentation and technical requirements. Confirm unified integration of field identification with both privacy layers.

# Subtasks:
## 5.1. Implement Data Masking Algorithms [done]
### Dependencies: None
### Description: Develop and integrate reversible masking algorithms for sensitive fields (names, emails, HKID numbers, phone numbers) to support UI display masking with toggle control. Ensure masking patterns like "J*** D***" for names and "j***@*****.com" for emails.
### Details:


## 5.2. Integrate SHA-256 Hashing with Salt for Security Pseudonymization [done]
### Dependencies: None
### Description: Implement a Security Pseudonymization module (`src/utils/security_pseudonymization.py`) with a `SecurityPseudonymizer` class using SHA-256 hashing and a configurable salt (minimum 32 bytes) for irreversible anonymization of sensitive data fields before external LLM processing. Provide `anonymize_field()` for individual fields and `anonymize_dataframe()` for DataFrame-wide processing. Ensure consistent, irreversible hashing, comprehensive field type handling (Account ID, HKID, emails, etc.), and robust salt management. No original PII or reversible pseudonyms are sent to external services.
### Details:


## 5.3. Sensitive Field Identification [done]
### Dependencies: None
### Description: Implement the EnhancedFieldIdentifier module (`src/utils/enhanced_field_identification.py`) with comprehensive PII coverage (13 types), Hong Kong-specific pattern support, context-aware detection, confidence scoring, configurable sensitivity, and performance optimization. Provide utility functions for integration with both security pseudonymization and display masking. Ensure 30+ comprehensive tests, configuration export/import, and unified service for both privacy layers. Demonstrate high accuracy, speed, and compliance with GDPR and Hong Kong PDPO.
### Details:


## 5.4. Reversible Display Masking System [todo]
### Dependencies: None
### Description: Integrate the reversible display masking system with the EnhancedFieldIdentifier module to ensure accurate, toggle-controlled masking for all supported PII types in the UI. Ensure original data is accessible only locally and never transmitted externally.
### Details:


## 5.5. Local Encrypted Storage of Original Data [todo]
### Dependencies: None
### Description: Ensure that all original PII is stored locally in encrypted form and is never transmitted to external APIs or services. Document encryption and access control measures.
### Details:


## 5.6. Integration with Data Processing Pipeline [todo]
### Dependencies: None
### Description: Integrate the Security Pseudonymization module with the data processing pipeline to ensure that all sensitive data is anonymized before external LLM processing. Validate the integration with comprehensive tests.
### Details:


